{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/TodoItem.js","App.js","app/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setChecked","map","item","id","done","actions","selectTodoList","todos","Input","React","useState","input","setInput","dispatch","useDispatch","className","type","value","onChange","e","target","onClick","console","log","Date","now","TodoItem","Checkbox","checked","color","inputProps","App","useSelector","store","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAMMA,EAAYC,YAAY,CAC1BC,KAAM,QACNC,aANiB,CACjBC,SAAU,IAMVC,SAAU,CACNC,SAAS,SAACC,EAAOC,GACbD,EAAMH,SAASK,KAAKD,EAAOE,UAE/BC,WAAW,SAACJ,EAAOC,GACfD,EAAMH,SAASQ,KAAI,SAAAC,GACZL,EAAOE,UAAYG,EAAKC,KACvBD,EAAKE,KAAKF,EAAKE,MAAO,EAAMF,EAAKE,MAAO,UAOrD,EAGHf,EAAUgB,QAFVV,EADG,EACHA,SACAK,EAFG,EAEHA,WAGSM,EAAiB,SAAAV,GAAK,OAAIA,EAAMW,MAAMd,UAEpCJ,IAAf,Q,OCzBe,SAASmB,IACpB,MAA4BC,IAAMC,SAAS,IAA3C,mBAAQC,EAAR,KAAeC,EAAf,KACMC,EAAWC,cAajB,OACI,sBAAKC,UAAU,mEAAf,UACI,uBAAOA,UAAU,kDAAkDC,KAAK,OAAOC,MAAON,EAAOO,SAAU,SAAAC,GAAC,OAAEP,EAASO,EAAEC,OAAOH,UAC5H,wBAAQF,UAAU,qEAAqEM,QAd/E,WACZC,QAAQC,IAAR,kBAAuBZ,EAAvB,MAEAE,EAASlB,EAAS,CACdO,KAAKS,EACLP,MAAM,EACND,GAAGqB,KAAKC,SAEZb,EAAS,KAML,qB,kBCdG,SAASc,EAAT,GAAuC,IAAnBnC,EAAkB,EAAlBA,KAAMa,EAAY,EAAZA,KAAMD,EAAM,EAANA,GACrCU,EAAWC,cAKjB,OACI,sBAAKC,UAAU,2EAAf,UACI,cAACY,EAAA,EAAD,CACIC,QAASxB,EACTyB,MAAM,UACNX,SARQ,WAChBL,EAASb,EAAWG,KAQZ2B,WAAY,CAAE,aAAa,wBAG/B,mBAAGf,UAAS,iBAAYX,GAAQ,gBAAhC,SAAmDb,OCOhDwC,MAvBf,WACE,IAAMtC,EAAWuC,YAAY1B,GAE7B,OACE,qBAAKS,UAAU,sDAAf,SACE,sBAAKA,UAAU,4EAAf,UACE,qBAAKA,UAAU,0EAAf,SAEItB,EAASQ,KAAI,SAAAC,GAAI,OACf,cAACwB,EAAD,CACEnC,KAAMW,EAAKA,KACXE,KAAMF,EAAKE,KACXD,GAAID,EAAKC,UAIjB,cAACK,EAAD,UCrBKyB,EAAQC,YAAe,CAClCC,QAAS,CACP5B,MAAM6B,KCEVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.61de01d9.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    todoList: []\r\n}\r\n\r\nconst todoSlice = createSlice({\r\n    name: 'todos',\r\n    initialState,\r\n    reducers: {\r\n        saveTodo:(state, action) => {\r\n            state.todoList.push(action.payload)\r\n        },\r\n        setChecked:(state, action) => {\r\n            state.todoList.map(item => {\r\n                if(action.payload === item.id ) {\r\n                    item.done?item.done = false:item.done = true;\r\n                }\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    saveTodo,\r\n    setChecked\r\n} = todoSlice.actions\r\n\r\nexport const selectTodoList = state => state.todos.todoList;\r\n\r\nexport default todoSlice.reducer","import React from 'react';\r\n\r\nimport {useDispatch} from 'react-redux';\r\nimport { saveTodo } from '../features/todoSlice';\r\n\r\nexport default function Input() {\r\n    const [ input, setInput ] = React.useState('')\r\n    const dispatch = useDispatch()\r\n    \r\n    const addTodo = () => {\r\n        console.log(`Adding \"${input}\"`)\r\n\r\n        dispatch(saveTodo({\r\n            item:input,\r\n            done: false,\r\n            id:Date.now()\r\n        }))\r\n        setInput(\"\") \r\n\r\n    }\r\n    return (\r\n        <div className=\"flex content-center items-center rounded-md w-4/5 h-12 bg-white \">\r\n            <input className=\"bg-none border-0 ml-3 flex-1 focus:outline-none\" type=\"text\" value={input} onChange={e=>setInput(e.target.value)} />\r\n            <button className=\"mr-2 bg-gray-200 rounded-xl border-0 h-7 w-14 focus:w-16 focus:h-8\" onClick={addTodo}>Add!</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../tailwind/tailwind.css';\r\n\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChecked } from '../features/todoSlice'\r\n\r\nexport default function TodoItem({ name, done, id }) {\r\n    const dispatch = useDispatch()\r\n\r\n    const handleCheck = () => {\r\n        dispatch(setChecked(id))\r\n    }\r\n    return (\r\n        <div className=\"flex items-center w-4/5 h-10 bg-white text-gray-600 mx-1 my-1 rounded-lg\">\r\n            <Checkbox\r\n                checked={done}\r\n                color=\"default\"\r\n                onChange={handleCheck}\r\n                inputProps={{ 'aria-label':'secondary checkbox'}}\r\n            />\r\n\r\n            <p className={`flex-1 ${done && 'line-through'}`}>{name}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\n// import './App.css';\nimport Input from './components/Input';\nimport TodoItem from './components/TodoItem';\n\nimport { useSelector } from 'react-redux';\nimport { selectTodoList } from './features/todoSlice';\n\nfunction App() {\n  const todoList = useSelector(selectTodoList);\n\n  return (\n    <div className=\"w-full h-full bg-yellow-600 grid place-items-center\">\n      <div className=\"h-screen w-96 flex flex-col items-center bg-gray-100 rounded-xl px-8 py-0\">\n        <div className=\"flex-1 w-full flex flex-col content-center items-center overflow-y-auto\">\n          {\n            todoList.map(item => (\n              <TodoItem \n                name={item.item}\n                done={item.done}\n                id={item.id} />\n            ))\n          }\n        </div>\n        <Input />\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer  from '../features/todoSlice'\n\nexport const store = configureStore({\n  reducer: {\n    todos:todoReducer\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}